generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum Role {
    SUPER_ADMIN
    AGENCY_OWNER
    AGENCY_ADMIN
    SUBACCOUNT_USER
    SUBACCOUNT_GUEST
}

enum Icon {
  dashboard
  analytics
  services
  expense
  employees
  inventory
  customers
  suppliers
  invoice
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model JobRole {
    name String @unique
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String?
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime @default(dbgenerated("NOW() + interval '1 year'"))
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                      String @id @default(cuid())
    name                    String @default("")
    firstName               String @default("")
    lastName                String @default("")
    email                   String @unique
    password                Boolean @default(false)
    emailVerified           DateTime? 
    image                   String @db.Text @default("") 
    status                  String @default("Pending")
    phoneNumber             String @default("")
    role                    Role   @default(SUBACCOUNT_USER)
    country                 String @default("")
    street                  String @default("")
    city                    String @default("")
    state                   String @default("")
    postalCode              String @default("")
    jobRole                 String @default("")
    isTwoFactorEnabled      Boolean @default(false)
    twoFactorConfirmation   TwoFactorConfirmation? 
    createdAt               DateTime @default(now())
    updatedAt               DateTime       @updatedAt
    agencyId                String?
    Agency                  Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
    Permissions             Permissions[]
    Ticket                  Ticket[]
    Notification            Notification[]
    accounts                Account[]
    sessions                Session[]
    timesheets              Timesheet[]
}

model Permissions {
  id           String     @id @default(uuid())
  email        String
  User         User       @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId String
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access       Boolean

  @@index([subAccountId])
  @@index([email])
}

model Agency {
  id               String                @id @default(uuid())
  connectAccountId String?               @default("")
  customerId       String                @default("")
  name             String
  agencyLogo       String                @db.Text
  companyEmail     String                @db.Text
  companyPhone     String
  whiteLabel       Boolean               @default(true)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  goal             Int                   @default(5)
  users            User[]
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  SubAccount       SubAccount[]
  SidebarOption    AgencySidebarOption[]
  Invitation       Invitation[]
  Notification     Notification[]
  Subscription     Subscription?
  AddOns           AddOns[]
  Customers        Customer[]
  Suppliers        Supplier[]
  Services         Service[]
  ServiceTypes     ServiceType[]
  Invoices         Invoice[]
  Timesheets       Timesheet[]
  Inventory        Inventory[]
}

model SubAccount {
  id               String                    @id @default(uuid())
  connectAccountId String?                   @default("")
  name             String
  subAccountLogo   String                    @db.Text
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String                    @db.Text
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agencyId         String
  Agency           Agency                    @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SidebarOption    SubAccountSidebarOption[]
  Permissions      Permissions[]
  Funnels          Funnel[]
  Media            Media[]
  Contact          Contact[]
  Trigger          Trigger[]
  Automation       Automation[]
  Pipeline         Pipeline[]
  Tags             Tag[]
  Notification     Notification[]
  Inventory        Inventory[]

  @@index([agencyId])
}

model Tag {
  id            String   @id @default(uuid())
  name          String
  color         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  subAccountId  String

  SubAccount    SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket        Ticket[]

  @@index([subAccountId])
}

model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  SubAccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId String

  @@index([subAccountId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId String
  Tickets    Ticket[]
  order      Int      @default(0)

  @@index([pipelineId])
}

model MaterialsUsed {
  id          String @id @default(uuid())
  quantity    Int

  inventoryId String
  Inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  
  ticketId  String
  Ticket    Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([id])
}

model Ticket {
  id              String   @id @default(uuid())
  name            String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deadline        DateTime
  priority        Boolean @default(false)
  laneId          String
  order           Int      @default(0)
  Lane            Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value           Decimal?
  description     String?
  Tags            Tag[]
  MaterialsUsed   MaterialsUsed[]

  customerId      String?
  Customer        Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId  String?
  Assigned        User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subAccountId String
  Subaccount   SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([subAccountId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId       String
  Subaccount         SubAccount           @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([subAccountId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id            String   @id @default(uuid())
  name          String
  email         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  subAccountId  String

  Subaccount    SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket        Ticket[]

  @@index([subAccountId])
}

model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  subAccountId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Subaccount   SubAccount @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  subAccountId  String
  SubAccount    SubAccount   @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String? 
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String? 
  order        Int 
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model AgencySidebarOption {
  id          String   @id @default(uuid())
  name        String   @default("Menu")
  href        String   @default("#")
  icon        Icon     @default(info)
  order       Int      @default(0)

  agencyId    String
  Agency      Agency?  @relation(fields: [agencyId], references: [id], onDelete: Cascade)

  Children    SidebarOptionChildren[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([agencyId])
}

model SubAccountSidebarOption {
  id           String      @id @default(uuid())
  name         String      @default("Menu")
  href         String      @default("#")
  icon         Icon        @default(info)
  order         Int         @default(0)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  SubAccount    SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  subAccountId  String?

  @@index([subAccountId])
}

model SidebarOptionChildren {
  id                String @id @default(uuid())
  name              String @default("Menu")
  href              String @default("#")
  order             Int    @default(0)

  agencySidebarId   String
  agencySideBar     AgencySidebarOption @relation(fields: [agencySidebarId], references: [id], onDelete: Cascade)
  
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id       String           @id @default(uuid())
  email    String           @unique
  agencyId String
  Agency   Agency           @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role     Role             @default(SUBACCOUNT_USER)

  @@index([agencyId])
}

model Notification {
  id            String  @id @default(uuid())
  notification  String
  agencyId      String
  subAccountId  String?
  userId        String

  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency        Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount    SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([agencyId])
  @@index([subAccountId])
  @@index([userId])
}

enum Plan {
  price_1Oy4C7HWcDxTr9jhGjBTZTnl
  price_1OsvDQHWcDxTr9jhU2PS17jJ
  price_1OsvDQHWcDxTr9jhM8YxUGnA
  price_1Oy5x7HWcDxTr9jhM8bQBPis //Essential
}

model Subscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plan      Plan?
  price     String?
  active    Boolean  @default(false)

  priceId               String
  customerId            String
  currentPeriodEndDate  DateTime
  subscritiptionId      String   @unique

  agencyId              String? @unique
  Agency                Agency? @relation(fields: [agencyId], references: [id])

  @@index([customerId])
}

model AddOns {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  active    Boolean  @default(false)
  priceId   String   @unique
  agencyId  String?
  Agency    Agency?  @relation(fields: [agencyId], references: [id])

  @@index([agencyId])
}

model TwoFactorToken {
    id        String @id @default(cuid())
    email     String
    token     String @unique
    expires   DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id        String @id @default(cuid())

    userId    String
    user      User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model AuthorizedEmail {
    id          String @id @default(cuid())
    email       String @unique
    registered  Boolean @default(false)
}

model VerificationToken {
    id          String @id @default(cuid())
    email       String @unique
    token       String @unique
    expires     DateTime

    @@unique([email, token])
}

model Customer {
    id            String @id @default(cuid())
    name          String
    companyName   String
    address       String
    email         String @unique
    phoneNumber   String

    agencyId      String
    Agency        Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)

    invoice       Invoice[]

    createdAt     DateTime @default(now())
}

model Supplier {
    id            String @id @default(cuid())
    name          String
    companyName   String
    address       String
    email         String @unique
    phoneNumber   String

    agencyId      String
    Agency        Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)

    Inventory     Inventory[]

    createdAt     DateTime @default(now())
}

model ServiceType {
    id            String @id @default(cuid())
    name          String

    agencyId      String
    Agency        Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)

    service       Service[]
}

model Service {
    id              String @id @default(cuid()) 
    price           Int
    description     String

    invoiceId       String 
    invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

    agencyId        String
    Agency          Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)

    serviceTypeId   String
    serviceType     ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
}

model Inventory {
    id            String      @id @default(cuid()) 
    name          String
    cost          Int
    quantity      Int
    description   String      @default("")
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @default(now())

    supplierId    String 
    Supplier      Supplier    @relation(fields: [supplierId], references: [id], onDelete: Cascade)

    agencyId      String
    Agency        Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)

    subaccountId  String?
    Subaccount    SubAccount? @relation(fields: [subaccountId], references: [id], onDelete: Cascade)

    MaterialsUsed MaterialsUsed[]
}

model Invoice {
    id            String @id 
    status        String
    payment       Float @default(0)
    total         Float
    shipping      Float
    tax           Int
    subTotal      Float
    discount      Float

    customerId      String
    customer        Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

    agencyId        String
    Agency          Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)
    
    services        Service[]

    createdAt       DateTime  @default(now())
    dueDate         DateTime
}

model Timesheet {
    id              String @id @default(cuid())
    dateFr          String
    dateTo          String
    status          String @default("draft") //Draft or Submit

    userId          String 
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

    agencyId        String
    Agency          Agency?        @relation(fields: [agencyId], references: [id], onDelete: Cascade)

    timeIn          TimeIn?
    timeOut         TimeOut?
    breakIn         BreakIn?
    breakOut        BreakOut?
    timeTotal       TimeTotal?

    @@unique([id])
}

model TimeIn {
    id              String @id @default(cuid())
    mon             String @default("")
    tue             String @default("")
    wed             String @default("")
    thu             String @default("")
    fri             String @default("")
    sat             String @default("")
    sun             String @default("")

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model BreakOut {
    id              String @id @default(cuid())
    mon             String @default("")
    tue             String @default("")
    wed             String @default("")
    thu             String @default("")
    fri             String @default("")
    sat             String @default("")
    sun             String @default("")

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model BreakIn {
    id              String @id @default(cuid())
    mon             String @default("")
    tue             String @default("")
    wed             String @default("")
    thu             String @default("")
    fri             String @default("")
    sat             String @default("")
    sun             String @default("")

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model TimeOut {
    id              String @id @default(cuid())
    mon             String @default("")
    tue             String @default("")
    wed             String @default("")
    thu             String @default("")
    fri             String @default("")
    sat             String @default("")
    sun             String @default("")

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model TimeTotal {
    id              String @id @default(cuid())
    mon             Float @default(0.00)
    tue             Float @default(0.00)
    wed             Float @default(0.00)
    thu             Float @default(0.00)
    fri             Float @default(0.00)
    sat             Float @default(0.00)
    sun             Float @default(0.00)
    total           Float @default(0.00)

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}