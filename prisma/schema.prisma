generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model JobRole {
    name String @unique
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String?
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime @default(dbgenerated("NOW() + interval '1 year'"))
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String @id @default(cuid())
    name          String @default("")
    firstName     String @default("")
    lastName      String @default("")
    email         String @unique
    password      String @default("")
    emailVerified DateTime? 
    image         String @default("")
    status        String @default("Pending")
    phoneNumber   String @default("")
    role          String @default("user")
    country       String @default("")
    street        String @default("")
    city          String @default("")
    state         String @default("")
    postalCode    String @default("")
    jobRole       String @default("")
    isTwoFactorEnabled Boolean @default(false)
    twoFactorConfirmation TwoFactorConfirmation? 
    createdAt     DateTime @default(now())
    accounts      Account[]
    sessions      Session[]
    timesheets    Timesheet[]
}

model TwoFactorToken {
    id String @id @default(cuid())
    email String
    token String @unique
    expires DateTime

    @@unique([email, token])
}

model TwoFactorConfirmation {
    id String @id @default(cuid())

    userId String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId])
}

model AuthorizedEmail {
    id          String @id @default(cuid())
    email       String @unique
    registered  Boolean @default(false)
}

model VerificationToken {
    id          String @id @default(cuid())
    email       String @unique
    token       String @unique
    expires     DateTime

    @@unique([email, token])
}

model Customer {
    id          String @id @default(cuid())
    name        String
    companyName String
    address     String
    email       String @unique
    phoneNumber String

    invoice     Invoice[]

    createdAt   DateTime @default(now())
}

model Supplier {
    id          String @id @default(cuid())
    name        String
    companyName String
    address     String
    email       String @unique
    phoneNumber String

    createdAt   DateTime @default(now())
}

model ServiceType {
    id          String @id @default(cuid())
    name        String

    service     Service[]
}

model Service {
    id              String @id @default(cuid()) 
    price           Int
    description     String

    invoiceId       String 
    invoice         Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

    serviceTypeId   String
    serviceType     ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
}

model Invoice {
    id          String @id 
    status      String
    payment     Float @default(0)
    total       Float
    shipping    Float
    tax         Int
    subTotal    Float
    discount    Float

    customerId  String
    customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
    
    services    Service[]

    createdAt   DateTime  @default(now())
    dueDate     DateTime
}

model Timesheet {
    id              String @id @default(cuid())
    dateFr          DateTime
    dateTo          DateTime
    status          String @default("draft") //Darft or Submit

    userId          String 
    user            User @relation(fields: [userId], references: [id], onDelete: Cascade)

    timeIn          TimeIn?
    timeOut         TimeOut?
    breakIn         BreakIn?
    breakOut        BreakOut?
    timeTotal       TimeTotal?

    @@unique([userId])
}

model TimeIn {
    id              String @id @default(cuid())
    mon             DateTime?
    tue             DateTime?
    wed             DateTime?
    thu             DateTime?
    fri             DateTime?
    sat             DateTime?
    sun             DateTime?

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model BreakOut {
    id              String @id @default(cuid())
    mon             DateTime?
    tue             DateTime?
    wed             DateTime?
    thu             DateTime?
    fri             DateTime?
    sat             DateTime?
    sun             DateTime?

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model BreakIn {
    id              String @id @default(cuid())
    mon             DateTime?
    tue             DateTime?
    wed             DateTime?
    thu             DateTime?
    fri             DateTime?
    sat             DateTime?
    sun             DateTime?

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model TimeOut {
    id              String @id @default(cuid())
    mon             DateTime?
    tue             DateTime?
    wed             DateTime?
    thu             DateTime?
    fri             DateTime?
    sat             DateTime?
    sun             DateTime?

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}

model TimeTotal {
    id              String @id @default(cuid())
    mon             Float @default(0.00)
    tue             Float @default(0.00)
    wed             Float @default(0.00)
    thu             Float @default(0.00)
    fri             Float @default(0.00)
    sat             Float @default(0.00)
    sun             Float @default(0.00)
    total           Float @default(0.00)

    timesheetId     String 
    timesheet       Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
    @@unique([timesheetId])
}